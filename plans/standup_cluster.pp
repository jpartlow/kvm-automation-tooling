# Standup one cluster of KVM virtual machines for a particular OS Puppet
# architecture.
#
# Makes use of terraform under the hood for vm initialization.
#
# @param cluster_name This is combined with *architecture*, *os*,
#   *os_version*, *os_arch* to obtain a reasonably unique id for the
#   cluster. The *cluster_name* allows you to stand up more than one
#   cluster of the same architecture and platform, for example.
# @param architecture The Puppet services architecture of the cluster
#   (see docs/ARCHITECTURE.md).
# @param os The base operating system of the cluster.
# @param os_version The version of the base operating system of the
#   cluster.
# @param os_arch The chip architecture of the base operating system of
#   the cluster.
# @param agents The number of Puppet agent vms to stand up in the
#   cluster.
# @param primary_cpus The number of CPUs to allocate to the primary vm.
# @param primary_mem_mb The amount of memory in MB to allocate to the
#   primary vm.
# @param primary_disk_gb The amount of disk space in GB to allocate to
#   the primary vm.
# @param agent_cpus The number of CPUs to allocate to each agent vm.
# @param agent_mem_mb The amount of memory in MB to allocate to each
#   agent vm.
# @param agent_disk_gb The amount of disk space in GB to allocate to
#   each agent vm.
# @param image_download_dir The directory where base os images are
#   downloaded to.
# @param terraform_state_dir The directory where terraform state files
#   are stored.
plan kvm_automation_tooling::standup_cluster(
  String $cluster_name,
  Kvm_automation_tooling::Architecture $architecture = 'singular',
  Kvm_automation_tooling::Operating_system $os,
  Kvm_automation_tooling::Version $os_version,
  Kvm_automation_tooling::Os_arch $os_arch,
  Integer $agents = 1,
  Integer $primary_cpus = 4,
  Integer $primary_mem_mb = 8192,
  Integer $primary_disk_gb = 20,
  Integer $agent_cpus = 1,
  Integer $agent_mem_mb = 512,
  Integer $agent_disk_gb = 10,
  String $image_download_dir = '~/images',
  String $terraform_state_dir = './terraform/instances',
) {
  $terraform_dir = './terraform'
  $platform = kvm_automation_tooling::platform($os, $os_version, $os_arch)
  $cluster_id = "${cluster_name}-${architecture}-${platform}"
  $primary_hostname = "${cluster_id}-primary"
  $agent_hostnames = $agents.map |$i| { "${cluster_id}-agent-${i}" }
  $tfvars_file = "${terraform_state_dir}/${cluster_id}.tfvars.json"
  $tfstate_file = "${terraform_state_dir}/${cluster_id}.tfstate"

  # Ensure base image volume is present and a platform image pool exists.
  run_plan('kvm_automation_tooling::subplans::manage_base_image_volume',
    'platform' => $platform,
    'image_download_dir' => $image_download_dir,
  )

  # Write cluster specific tfvars.json file to a separate directory to
  # keep different cluster instances separated.
  file::write($tfvars_file, stdlib::to_json({
    # TODO: this list was generated by copilot and needs to be reviewed. 
    cluster_id => $cluster_id,
    primary_hostname => $primary_hostname,
    agent_hostnames => $agent_hostnames,
    primary_cpus => $primary_cpus,
    primary_mem_mb => $primary_mem_mb,
    primary_disk_gb => $primary_disk_gb,
    agent_cpus => $agent_cpus,
    agent_mem_mb => $agent_mem_mb,
    agent_disk_gb => $agent_disk_gb,
  }))

  # Ensure terraform dependencies are installed.
  run_task('terraform::initialize', 'localhost', 'dir' => $terraform_dir)

  # Terraform apply.
  run_plan('terraform::apply',
    'dir'      => $terraform_dir,
    'var_file' => $tfvars_file,
    'state'    => $tfstate_file,
  )
}
